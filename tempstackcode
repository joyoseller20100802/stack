
#include "stdafx.h"
#include <iostream>
#include <stdlib.h>
using namespace std;
int ans[10];
int visited[10];
//先根遍历
//int mainstack[10]; //是两个数据结构混合 栈 和 线性表 一会变成栈 一会变成线性表
// 最左边 最右边 分别是进栈出栈是栈操做 对应数据结构栈 中间的为队列 ADD BY LICHAO 20180902
#define STACK_INIT_SIZE 100

typedef struct
{
	int *top;
	int *base;
	int stacksize;
}SqStack; 
SqStack mainstack;

bool InitStack(SqStack *s)
{
	s->base = (int *)malloc(STACK_INIT_SIZE*sizeof(int));
	s->top = s->base;
	s->stacksize = STACK_INIT_SIZE;
	if (s->base)
	{
		return true;
	}
	return false;
}
bool pop(SqStack *s,int *num)
{
	*num = *(--s->top);
	return true;
}
bool push(SqStack *s, int num)
{
	*(s->top++) = num;
	return true;
}
void dfs()
{
	int cur =1;
	SqStack *mainstack = (SqStack *) malloc(sizeof (SqStack));
	InitStack(mainstack);
	int number = 1;
	int n = 3;

	while (cur>=1)
	{
		int flag = 0;
		for (int i=number;i<=n;i++) //找当前点 ADD BY LICHAO 20180901  
		{
			if (visited[i] == 0)
			{
				number = i;
				flag = 1;  
				break;
			}
		}
		if (flag)  // correspoding to if pass(...) //用判断语句把状态空间分类 进行不同处理
		{
			if (ans[cur])
			visited[ans[cur]]=0;
			ans[cur] = number;                  //用当前的点 程序中只有一个
			visited[number] = 1;
			push(mainstack ,number); //如果找到当前点 把自己PUSH进去为右兄弟做准备 右兄弟的左界限 由画图数据结构分析得 这个队列 ADD BY LICHAO 20180901 找不到的情况比如4

			if (cur == n )				//注意 !! 终于找到和AMZE的根本不同  这里PUSH 不一定有 找儿子的过程 但是AMZE一定有 POP 对应的STEP不同
			{
				  for(int i=1;i<=n;i++)
				  cout<<ans[i]<<" ";
				  cout<<endl;
/*找兄弟当前节点*/    pop(mainstack,&number);  //  //先根遍历    ！！要得是路径 POP为的给路径赋值 横着走 这里有一个短暂STACK长度不同与CUR（可以看成是更新） 等于n的普通节点和空节点处理不同 这里CUR不减
				  number++; //右兄弟的左界限  这一步一定下一步是为空
			}
			else
			{	
				cur ++;          //添加一层堆栈
/*找儿子为当前节点*/number = 1;  //  有儿子找儿子没儿子找兄弟 没兄弟向上找父节点的兄弟  ！！！！！！可以看成是PUSH然后POP 更新，这样3个出口统一了 这些POP是对应着下一个循环的PUSH的 这样来更新
			}
		}
		else   //如果当前节点为空 也就是空节点 ADD BY LICHAO 20180901  对应DFS可以看出 这里都是退出函数部分 可以分成3部分 进入函数部分 在函数中间 退出函数部分
		{ 
			visited[ans[cur]] = 0;
			ans[cur]=0;            //删掉一层堆栈
/*为叶子*/	cur --;                //CUR对应DFS里面的 step  本来想着更新没更新成因为是叶子 向上
/*向上找兄弟当前节点*/ pop(mainstack,&number);//找不到的情况比如4   !!!找兄弟为当前节点 // 栈上存的不是相对应的树  而是为当前节点准备的左界限  这里有一个短暂STACK长度不同与CUR
			number ++;
		}
	}	
	
}

int main(int argc, char* argv[])
{
 	dfs();
	 
	return 0;
}

